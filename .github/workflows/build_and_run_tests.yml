name: Build and run tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-run-tests:
    name: ${{ matrix.config.name }} ${{ matrix.build_type }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { name: "Windows MSVC", os: windows-latest, cc: "cl", cxx: "cl" }
          - { name: "Windows MinGW", os: windows-latest, cc: "gcc", cxx: "g++" }
          - { name: "Ubuntu GCC", os: ubuntu-latest, cc: "gcc", cxx: "g++" }
          - {
              name: "MacOS Clang",
              os: macos-latest,
              cc: "clang",
              cxx: "clang++",
            }
        build_type:
          - Debug
          - Release

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Download ccache
        id: ccache
        shell: cmake -P {0}
        run: |
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(ccache_dir "ccache-$ENV{CCACHE_VERSION}-windows-x86_64")
            set(ccache_archive "${ccache_dir}.zip")
          elseif ("${{ runner.os }}" STREQUAL "Linux")
            set(ccache_dir "ccache-$ENV{CCACHE_VERSION}-linux-x86_64")
            set(ccache_archive "${ccache_dir}.tar.xz")
          elseif ("${{ runner.os }}" STREQUAL "macOS")
            set(ccache_dir "ccache-$ENV{CCACHE_VERSION}-darwin")
            set(ccache_archive "${ccache_dir}.tar.gz")
          endif()

          set(ccache_url "https://github.com/ccache/ccache/releases/download/v$ENV{CCACHE_VERSION}/${ccache_archive}")
          file(DOWNLOAD "${ccache_url}" ./${ccache_archive} SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./${ccache_archive})

          # Add to PATH environment variable
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${ccache_dir}" ccache_dir)
          set(path_separator ":")
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(path_separator ";")
          endif()
          file(APPEND "$ENV{GITHUB_PATH}" "$ENV{GITHUB_WORKSPACE}${path_separator}${ccache_dir}")

          if (NOT "${{ runner.os }}" STREQUAL "Windows")
            execute_process(COMMAND chmod +x ${ccache_dir}/ccache)
          endif()

      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          file(APPEND "$ENV{GITHUB_OUTPUT}" "timestamp=${current_date}")

      - name: ccache cache files
        uses: actions/cache@v3
        with:
          path: .ccache
          key: ${{ matrix.config.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            ${{ matrix.config.name }}-ccache-

      - name: Configure
        shell: cmake -P {0}
        run: |
          set(ENV{CC} ${{ matrix.config.cc }})
          set(ENV{CXX} ${{ matrix.config.cxx }})

          set(path_separator ":")
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(path_separator ";")
          endif()
          set(ENV{PATH} "$ENV{GITHUB_WORKSPACE}${path_separator}$ENV{PATH}")

          execute_process(
            COMMAND cmake
              -S ./tests
              -B build
              -D WARNINGS_AS_ERRORS_FOR_EXE_PATH=ON
              -D CMAKE_BUILD_TYPE=${{ matrix.build_type }}
              -D CMAKE_C_COMPILER_LAUNCHER=ccache
              -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()

      - name: Build
        shell: cmake -P {0}
        run: |
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}" ccache_basedir)
          set(ENV{CCACHE_BASEDIR} "${ccache_basedir}")
          set(ENV{CCACHE_DIR} "${ccache_basedir}/.ccache")
          set(ENV{CCACHE_COMPRESS} "true")
          set(ENV{CCACHE_COMPRESSLEVEL} "6")
          set(ENV{CCACHE_MAXSIZE} "400M")
          if ("${{ matrix.config.cxx }}" STREQUAL "cl")
            set(ENV{CCACHE_MAXSIZE} "600M")
          endif()

          execute_process(COMMAND ccache -p)
          execute_process(COMMAND ccache -z)

          execute_process(
            COMMAND cmake
              --build build
              --config ${{ matrix.build_type }}
              --target exe_path-tests
            
            RESULT_VARIABLE result
            OUTPUT_VARIABLE output
            ERROR_VARIABLE output
            ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
          )

          if (NOT result EQUAL 0)
            string(REGEX MATCH "FAILED:.*$" error_message "${output}")
            string(REPLACE "\n" "%0A" error_message "${error_message}")
            message("::error::${error_message}")
            message(FATAL_ERROR "Build failed")
          endif()

      - name: ccache statistics
        shell: cmake -P {0}
        run: |
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}" ccache_basedir)
          set(ENV{CCACHE_BASEDIR} "${ccache_basedir}")
          set(ENV{CCACHE_DIR} "${ccache_basedir}/.ccache")

          execute_process(COMMAND ccache -s)

    #   - name: Run tests
    # shell: cmake -P {0}
    # run: |
    #   include(ProcessorCount)
    #   ProcessorCount(N)

    #   set(ENV{CTEST_OUTPUT_ON_FAILURE} "ON")

    #   execute_process(
    #     COMMAND ctest -j ${N}
    #     WORKING_DIRECTORY build
    #     RESULT_VARIABLE result
    #     OUTPUT_VARIABLE output
    #     ERROR_VARIABLE output
    #     ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
    #   )
    #   if (NOT result EQUAL 0)
    #     string(REGEX MATCH "[0-9]+% tests.*[0-9.]+ sec.*$" test_results "${output}")
    #     string(REPLACE "\n" "%0A" test_results "${test_results}")
    #     message("::error::${test_results}")
    #     message(FATAL_ERROR "Running tests failed!")
    #   endif()
